basePath: /api/v1
definitions:
  model.Account:
    properties:
      created-at:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        type: string
      user-name:
        type: string
    type: object
  model.AccountCreationInfo:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      user-name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - password
    - role
    - user-name
    type: object
  model.ApproveTimetable:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  model.DetailProject:
    properties:
      join-at:
        type: string
      leave-at:
        type: string
      project-name:
        type: string
      status:
        type: string
    type: object
  model.DetailSkill:
    properties:
      skill-level:
        type: string
      technical-skill:
        type: string
    type: object
  model.Intern:
    properties:
      account-id:
        type: string
      address:
        type: string
      avatar:
        type: string
      date-of-birth:
        type: string
      email:
        type: string
      gender:
        type: string
      intern-id:
        type: string
      ojt-semester:
        type: string
      phone-number:
        type: string
      student-code:
        type: string
      user-name:
        type: string
    type: object
  model.InternCreation:
    properties:
      address:
        type: string
      avatar:
        type: string
      date-of-birth:
        type: string
      email:
        type: string
      gender:
        type: string
      ojt-id:
        type: integer
      password:
        minLength: 6
        type: string
      phone-number:
        type: string
      student-code:
        maxLength: 10
        minLength: 4
        type: string
      user-name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - password
    - student-code
    - user-name
    type: object
  model.InternDetailInfo:
    properties:
      address:
        type: string
      avatar:
        type: string
      date-of-birth:
        type: string
      detail-project:
        items:
          $ref: '#/definitions/model.DetailProject'
        type: array
      detail-skill:
        items:
          $ref: '#/definitions/model.DetailSkill'
        type: array
      email:
        type: string
      gender:
        type: string
      id:
        type: string
      ojt-semester:
        type: string
      phone-number:
        type: string
      student-code:
        type: string
      user-name:
        type: string
    type: object
  model.InternUpdateInfo:
    properties:
      address:
        type: string
      avatar:
        type: string
      date-of-birth:
        type: string
      email:
        type: string
      gender:
        type: string
      ojt-id:
        type: integer
      phone-number:
        type: string
      student-code:
        maxLength: 10
        minLength: 4
        type: string
      user-name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - student-code
    - user-name
    type: object
  model.LoginForm:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.MapInternSkill:
    properties:
      skill-level:
        items:
          type: string
        type: array
      skills:
        items:
          type: integer
        type: array
    required:
    - skill-level
    - skills
    type: object
  model.MapProMem:
    properties:
      mem-id:
        type: string
    required:
    - mem-id
    type: object
  model.MapProPM:
    properties:
      list-manager-id:
        items:
          type: string
        type: array
    required:
    - list-manager-id
    type: object
  model.Member:
    properties:
      avatar:
        type: string
      id:
        type: string
      ojt-semester-university:
        type: string
      student-code:
        type: string
      technical_skills:
        type: string
      user-name:
        type: string
    type: object
  model.OJT:
    properties:
      end-at:
        type: string
      id:
        type: integer
      semester:
        type: string
      start-at:
        type: string
      university:
        type: string
    type: object
  model.OJTCreationInfo:
    properties:
      end-at:
        type: string
      semester:
        type: string
      start-at:
        type: string
      university:
        type: string
    required:
    - end-at
    - semester
    - start-at
    - university
    type: object
  model.PM:
    properties:
      email:
        type: string
      id:
        type: string
      user-name:
        type: string
    type: object
  model.Project:
    properties:
      description:
        type: string
      duration:
        type: string
      id:
        type: string
      name:
        type: string
      start-date:
        type: string
      status:
        type: string
    type: object
  model.ProjectCreationInfo:
    properties:
      description:
        type: string
      duration:
        type: string
      name:
        type: string
      start-at:
        type: string
    required:
    - description
    - duration
    - name
    - start-at
    type: object
  model.TaskCreation:
    properties:
      assigned-to:
        type: string
      description:
        type: string
      estimated-effort:
        type: string
      name:
        type: string
    required:
    - assigned-to
    - name
    type: object
  model.Technical:
    properties:
      Technical-skill:
        type: string
      id:
        type: integer
    type: object
  model.TechnicalCreationInfo:
    properties:
      technical-skill:
        type: string
    required:
    - technical-skill
    type: object
  model.Timtable:
    properties:
      act-end:
        type: string
      act-start:
        type: string
      est-end:
        type: string
      est-start:
        type: string
      id:
        type: string
      intern_name:
        type: string
      office-time:
        type: string
      status:
        type: string
      student-code:
        type: string
    type: object
  model.TimtableCreation:
    properties:
      est-end:
        type: string
      est-start:
        type: string
      office-time:
        type: string
    required:
    - est-end
    - est-start
    - office-time
    type: object
  model.UpdateAccountInfo:
    properties:
      email:
        type: string
      role:
        type: string
      user-name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - role
    - user-name
    type: object
  model.UpdateOJTInfo:
    properties:
      end-at:
        type: string
      semester:
        type: string
      start-at:
        type: string
      university:
        type: string
    required:
    - end-at
    - semester
    - start-at
    - university
    type: object
  model.UpdateProjectInfo:
    properties:
      description:
        type: string
      duration:
        type: string
      name:
        type: string
      start-date:
        type: string
      status:
        type: string
    required:
    - description
    - duration
    - name
    - start-date
    - status
    type: object
  utils.error_response:
    properties:
      log:
        type: string
      message: {}
      status-code:
        type: integer
    type: object
  utils.success_response:
    properties:
      data: {}
      filter: {}
      message:
        type: string
      paging: {}
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: A web application to manage interns at the Nextbean Center, designed
    to oversee their daily tasks and schedules while working at the office. The app
    aims to streamline the management of internship programs, enabling efficient tracking
    of intern activities, assignments, and attendance for a well-organized and productive
    internship experience.
  title: Intern Resource Management System
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Get a list of accounts with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Filter by account ID
        in: query
        name: id
        type: integer
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: 'Filter by role ~ ex: admin-pm | admin-manager-pm'
        in: query
        name: role
        type: string
      - description: Filter by creation date from (YYYY-MM-DD) ~ ex:2024-05-29
        in: query
        name: created-at-from
        type: string
      - description: Filter by creation date to (YYYY-MM-DD)
        in: query
        name: created-at-to
        type: string
      - description: 'Order by field (created_at or name), prefix with - for descending
          order ~ Ex: user_name desc'
        in: query
        name: order-by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Account'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: Get accounts
      tags:
      - Accounts
    post:
      consumes:
      - application/json
      description: account creation information
      parameters:
      - description: account creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AccountCreationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: create new account
      tags:
      - Accounts
  /accounts/{account-id}:
    delete:
      consumes:
      - application/json
      description: delete account information
      parameters:
      - description: Account ID
        in: path
        name: account-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful delete
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: delete failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: delete an account
      tags:
      - Accounts
    put:
      consumes:
      - application/json
      description: update account's information
      parameters:
      - description: Account ID
        in: path
        name: account-id
        required: true
        type: string
      - description: account update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAccountInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: update failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: update account
      tags:
      - Accounts
  /interns:
    get:
      consumes:
      - application/json
      description: Get a list of interns with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Account ID
        in: query
        name: account-id
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: Email
        in: query
        name: email
        type: string
      - description: Student Code
        in: query
        name: student-code
        type: string
      - description: OJT Semester
        in: query
        name: ojt-semester
        type: string
      - description: Gender
        in: query
        name: gender
        type: string
      - description: Phone Number
        in: query
        name: phone-number
        type: string
      - description: Address
        in: query
        name: address
        type: string
      - description: Date of Birth From
        in: query
        name: dob-from
        type: string
      - description: Date of Birth To
        in: query
        name: dob-to
        type: string
      - description: 'Order by field (created_at or name), prefix with - for descending
          order ~ Ex: user_name desc'
        in: query
        name: order-by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Intern'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: Get interns
      tags:
      - Interns
    post:
      consumes:
      - application/json
      description: intern creation information
      parameters:
      - description: 'Required: user-name, email, password, student-code'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.InternCreation'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: create new intern-account
      tags:
      - Interns
  /interns/{intern-id}:
    get:
      consumes:
      - application/json
      description: Get details of intern (base infomation, skills, projects)
      parameters:
      - description: enter intern-id
        in: path
        name: intern-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  $ref: '#/definitions/model.InternDetailInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: Get intern'details by account-id
      tags:
      - Interns
    put:
      consumes:
      - application/json
      description: update intern's information
      parameters:
      - description: intern ID
        in: path
        name: intern-id
        required: true
        type: string
      - description: intern update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.InternUpdateInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: update failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: update intern
      tags:
      - Interns
  /interns/{intern-id}/skill:
    post:
      consumes:
      - application/json
      description: Add intern skills information
      parameters:
      - description: Intern ID
        in: path
        name: intern-id
        required: true
        type: string
      - description: 'Required: Fill in the id (number) of the skills into this array'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MapInternSkill'
      produces:
      - application/json
      responses:
        "200":
          description: Successful mapping
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: mapping failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: map intern-skill
      tags:
      - Interns
  /login:
    post:
      consumes:
      - application/json
      description: Log in using account with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginForm'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: login failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: login by account
      tags:
      - Authentication
  /ojts:
    get:
      consumes:
      - application/json
      description: Get a list of ojt with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Filter by ojt'ID
        in: query
        name: id
        type: integer
      - description: Filter by semester
        in: query
        name: semester
        type: string
      - description: Filter by university
        in: query
        name: university
        type: string
      - description: 'Order by field (created_at or name), prefix with - for descending
          order ~ Ex: university desc'
        in: query
        name: order-by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.OJT'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: Get OJT
      tags:
      - OJTS
    post:
      consumes:
      - application/json
      description: ojt creation information
      parameters:
      - description: ojt creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.OJTCreationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: create new ojt (on the job training)
      tags:
      - OJTS
  /ojts/{ojt-id}:
    delete:
      consumes:
      - application/json
      description: delete ojt information
      parameters:
      - description: OJT ID
        in: path
        name: ojt-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful delete
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: delete failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: delete an ojt
      tags:
      - OJTS
    put:
      consumes:
      - application/json
      description: update ojt's information
      parameters:
      - description: OJT ID
        in: path
        name: ojt-id
        required: true
        type: integer
      - description: OJT update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOJTInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: update failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: update ojt
      tags:
      - OJTS
  /projects:
    get:
      consumes:
      - application/json
      description: Get a list of projects with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Project's Name
        in: query
        name: name
        type: string
      - description: Project's Status
        in: query
        name: status
        type: string
      - description: get project which have start date from this date
        in: query
        name: start-date-from
        type: string
      - description: get project which have start date to this date
        in: query
        name: start-date-to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Project'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: project creation information
      parameters:
      - description: project creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ProjectCreationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: create new project
      tags:
      - Projects
  /projects/{project-id}:
    put:
      consumes:
      - application/json
      description: project update information
      parameters:
      - description: Project ID
        in: path
        name: project-id
        required: true
        type: string
      - description: project update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProjectInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Update project
      tags:
      - Projects
  /projects/{project-id}/{member-id}:
    delete:
      consumes:
      - application/json
      description: remove member to project information
      parameters:
      - description: Project ID
        in: path
        name: project-id
        required: true
        type: string
      - description: Member ID
        in: path
        name: member-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful mapping
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: mapping failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: remove map project-member
      tags:
      - Projects
  /projects/{project-id}/member:
    post:
      consumes:
      - application/json
      description: Add member to project information
      parameters:
      - description: Project ID
        in: path
        name: project-id
        required: true
        type: string
      - description: Add project-id and member-id to this json
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MapProMem'
      produces:
      - application/json
      responses:
        "200":
          description: Successful mapping
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: mapping failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: map project-member
      tags:
      - Projects
  /projects/{project-id}/member-in-project:
    get:
      consumes:
      - application/json
      description: Get a list of Member in Project
      parameters:
      - description: enter project-id
        in: path
        name: project-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Member'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get Member in Project
      tags:
      - Projects
  /projects/{project-id}/member-outside-project:
    get:
      consumes:
      - application/json
      description: Get a list of Memer not in Project
      parameters:
      - description: enter project-id
        in: path
        name: project-id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: member'name
        in: query
        name: user-name
        type: string
      - description: student-code of member
        in: query
        name: student-code
        type: string
      - description: member'semester
        in: query
        name: semester
        type: string
      - description: member's university
        in: query
        name: university
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Member'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get Memer not in project
      tags:
      - Projects
  /projects/{project-id}/pm-in-project:
    get:
      consumes:
      - application/json
      description: Get a list of PM in Project
      parameters:
      - description: enter project-id
        in: path
        name: project-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.PM'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get PM
      tags:
      - Projects
  /projects/{project-id}/pm-outside-project:
    get:
      consumes:
      - application/json
      description: Get a list of PM not in Project
      parameters:
      - description: enter project-id
        in: path
        name: project-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.PM'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get PM not in project
      tags:
      - Projects
  /projects/{project-id}/project-managers:
    post:
      consumes:
      - application/json
      description: Add manager to project information
      parameters:
      - description: Project ID
        in: path
        name: project-id
        required: true
        type: string
      - description: 'Required: Fill in the id of the project manager into this array'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MapProPM'
      produces:
      - application/json
      responses:
        "200":
          description: Successful mapping
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: mapping failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: map project-manager
      tags:
      - Projects
  /tasks/{project-id}:
    post:
      consumes:
      - application/json
      description: task creation information
      parameters:
      - description: enter project-id
        in: path
        name: project-id
        required: true
        type: string
      - description: task creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TaskCreation'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: create new task
      tags:
      - Tasks
  /technicals:
    get:
      consumes:
      - application/json
      description: Get a list of Technical with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Filter by tecnical ID
        in: query
        name: id
        type: integer
      - description: Filter by technical-skill
        in: query
        name: technical-skill
        type: string
      - description: 'Order by field (created_at or name), prefix with - for descending
          order ~ Ex: university desc'
        in: query
        name: order-by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Technical'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: Get Technical
      tags:
      - Technicals
    post:
      consumes:
      - application/json
      description: technical creation information
      parameters:
      - description: technical creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TechnicalCreationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      summary: create new Technical
      tags:
      - Technicals
  /timetables:
    get:
      consumes:
      - application/json
      description: Get a list of timetables with filtering, sorting, and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: psize
        type: integer
      - description: Filter by account ID
        in: query
        name: id
        type: integer
      - description: Filter by intern name
        in: query
        name: intern-name
        type: string
      - description: Filter by student-code
        in: query
        name: student-code
        type: string
      - description: 'Filter by status ~ ex: denied-approved | processing-denied-approved'
        in: query
        name: status
        type: string
      - description: Filter by office-time from (YYYY-MM-DD) ~ ex:2024-05-29
        in: query
        name: office-time-from
        type: string
      - description: Filter by office-time to (YYYY-MM-DD)
        in: query
        name: office-time-to
        type: string
      - description: 'Order by field (created_at or name), prefix with - for descending
          order ~ Ex: user_name desc'
        in: query
        name: order-by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.success_response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Timtable'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.error_response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: Get timetables
      tags:
      - Timetables
    post:
      consumes:
      - application/json
      description: timetable creation information
      parameters:
      - description: timetable creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TimtableCreation'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: create new intern timetable to work offline in office
      tags:
      - Timetables
  /timetables/{timetable-id}/approve:
    post:
      consumes:
      - application/json
      description: admin approve intern'schedule
      parameters:
      - description: enter timetable-id
        in: path
        name: timetable-id
        required: true
        type: string
      - description: timetable creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ApproveTimetable'
      produces:
      - application/json
      responses:
        "200":
          description: Successful create
          schema:
            $ref: '#/definitions/utils.success_response'
        "400":
          description: create failure
          schema:
            $ref: '#/definitions/utils.error_response'
      security:
      - ApiKeyAuth: []
      summary: approve intern timetable to work offline in office
      tags:
      - Timetables
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
